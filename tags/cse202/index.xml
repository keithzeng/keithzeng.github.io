<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cse202 on k317h</title>
    <link>https://keithzeng.github.io/tags/cse202/</link>
    <description>Recent content in cse202 on k317h</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Mar 2019 18:34:16 -0800</lastBuildDate>
    
	<atom:link href="https://keithzeng.github.io/tags/cse202/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSE202 HW4</title>
      <link>https://keithzeng.github.io/hws/cse202-hw4/</link>
      <pubDate>Sun, 03 Mar 2019 18:34:16 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/hws/cse202-hw4/</guid>
      <description>Problem 1: Balanced Simple Path Idea To prove Balanced Simple Path(BSP) is NP-Complete, we need to do following:
 Prove that BSP $\in$ NP. Choose a problem Y that is known to be NP-complete Consider an arbitrary instance $s_Y$ of problem Y, and show how to construct, in polynomial time, an instance $s_X$ of problem X that satisfies the following properties:  If $s_Y$ is a “yes” instance of Y, then $s_X$ is a “yes” instance of X If $s_X$ is a “yes” instance of X, then $s_Y$ is a “yes” instance of Y.</description>
    </item>
    
    <item>
      <title>CSE202 HW3</title>
      <link>https://keithzeng.github.io/hws/cse202-hw3/</link>
      <pubDate>Mon, 18 Feb 2019 19:32:41 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/hws/cse202-hw3/</guid>
      <description>Problem 1 Idea We can think every row as a node with influx of row&amp;rsquo;s sum that we want to distribute into every column which is also a node with edge&amp;rsquo;s capacity of M.
Let&amp;rsquo;s define $X_1 &amp;hellip; X_n$ to be the rows and $Y_1 .. Y_n$ to be the columns. The preliminary graph looks like this.
Due to the nature of the network flow problem, we might have edge with 0 flow.</description>
    </item>
    
    <item>
      <title>CSE202 HW2</title>
      <link>https://keithzeng.github.io/hws/cse202-hw2/</link>
      <pubDate>Tue, 05 Feb 2019 13:01:30 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/hws/cse202-hw2/</guid>
      <description>HW Link
Problem 1 (KT 5.2) Idea: we will need to modify the merge-and-count function, everything else stays the same as regular inversion algorithm.
merge-and-count(A, B):
 i = 1, j = 1, where i is pointer to A, j is pointer to B count = 0, lenA = length(A), lenB = length(B) sorted = {} While $i \leq lenA$ and $j \leq lenB$:  if (A[i] $\leq$ B[j])  sorted = sorted + {A[i]} $i \gets i + 1$  else  sorted = sorted + {B[j]} $j \gets j + 1$   append remaining A or append remaining B to sorted While $i \leq lenA$ and $j \leq lenB$:  if (A[i] $\leq$ 2B[j]), means no significant inversion  $i \gets i + 1$  else  $j \gets j + 1$ $count \gets count + (lenA - i + 1)$   return (sorted, count)  Analysis Time Complexity Instead of looping once for original inversion problem, we here loop twice.</description>
    </item>
    
    <item>
      <title>Fast Fourtier Transform</title>
      <link>https://keithzeng.github.io/posts/fast-fourtier-transform/</link>
      <pubDate>Wed, 30 Jan 2019 00:31:46 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/fast-fourtier-transform/</guid>
      <description>Problem Given two vectors $a = (a_1, a_2, a_{n-1})$ and $b = (a_1, b_2, b_{n-1})$.
The convolution of a * b is a vector with 2n - 1 coordinates, where coordinate k is $\sum_{(i,j):i+j=k|i,j &amp;lt; n} a_ib_j$, which is can be written as
$$a ∗ b = (a_0b_0, a_0b_1 + a_1b_0, a_0b_2 + a_1b_1 + a_2b_0, &amp;hellip; , a_{n−2}b_{n−1} + a_{n−1}b_{n−2}, a_{n−1}b_{n−1})$$
Or an n x n table, whose (i, j) entry is $a_ib_j$</description>
    </item>
    
    <item>
      <title>Integer Multiplication</title>
      <link>https://keithzeng.github.io/posts/integer-multiplication/</link>
      <pubDate>Wed, 30 Jan 2019 00:02:09 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/integer-multiplication/</guid>
      <description>Problem Wiki Explanation
Algorithm Let&amp;rsquo;s say we define $x = x_1 2^{n/2} + x_0$, then xy become \begin{align} xy &amp;amp;= (x_1 2^{n/2} + x_0)(y_1 2^{n/2} + y_0) \newline &amp;amp;= x_1 y_1 2^n + (x_1 y_0 + x_0 y_1)2^{n/2} + x_0 y_0 \end{align}
So we have $$T(n) \leq 4T(n/2) + cn$$ But this is essentially $$T(n) \leq O(n^{\log_2 q}) = O(n^2)$$
However, we can reduce the time by observing that $(x_1 + x_0)(y_1 + y_0) = x_1y_1 + x_1y_0 + x_0y_1 + x_0y_0$.</description>
    </item>
    
    <item>
      <title>Closest Point</title>
      <link>https://keithzeng.github.io/posts/closest-point/</link>
      <pubDate>Tue, 29 Jan 2019 23:36:54 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/closest-point/</guid>
      <description>Problem Given n points in the plane, find the pair that is closest together.
Brute force takes $O(n^2)$.
Algorithm Let&amp;rsquo;s $d(p_i, p_j)$ = Euclidean distance.
In 1-d, we can simply sort points and compute the distance with the next point, we then have complexity of O(nlogn). In 2-d, we can&amp;rsquo;t applied the same thing.
We will use divide and conquer. We find the closest pair in the left and closest pair in the right, and hoping to get it in linear time.</description>
    </item>
    
    <item>
      <title>Counting Inversion</title>
      <link>https://keithzeng.github.io/posts/counting-inversion/</link>
      <pubDate>Tue, 29 Jan 2019 22:37:45 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/counting-inversion/</guid>
      <description>Problem Application in ranking, also called corraborative filtering.
Comparing two rankings and decide how similar they are, or how many pairs are out of order.
To quantify this, we count the number of inversions. The inversion is defined as two indices i &amp;lt; j that $a_i &amp;gt; a_j$. Algorithm Brute-Force $T(n) = O(n^2)$
Modified Merge-Sort By leverage the merge process form merger-sort, we can count the number of inversion. Basically, when the element from A is appended, there is not inversion.</description>
    </item>
    
    <item>
      <title>Merge Sort</title>
      <link>https://keithzeng.github.io/posts/merge-sort/</link>
      <pubDate>Tue, 29 Jan 2019 01:14:32 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/merge-sort/</guid>
      <description>Problem Sort the elements
Abstract the behavior:
1. Divide the input into two pieces of equal size O(n) 1. solve the two subproblems on these pieces separately by recursion 1. combine the two results into an overall solution O(n)
Recurrence Time Complexity q = 2 T(n) ≤ 2T(n/2) + cn
To analyze the above recurrence relation, check below image.  At level j, we have $2^j$ nodes with size $n/2^j$ Each node takes $cn/2^j$, so level j takes $cn/2^j$ x $2^j = cn$ There are logn levels, so T(n) = O(nlogn)  General Case For q &amp;gt; 2 T(n) ≤ qT(n/2) + cn</description>
    </item>
    
    <item>
      <title>CSE202 HW1</title>
      <link>https://keithzeng.github.io/hws/cse202-hw1/</link>
      <pubDate>Sat, 26 Jan 2019 13:30:38 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/hws/cse202-hw1/</guid>
      <description>HW Link
Problem 1 (KT 4.2a) YES. T is still the MST for new instance.
Proof by contraction
 Assume original MST is T and new MST is T&amp;rsquo; $T \neq T&amp;rsquo;$, at least one edge is different $\exists$ $e_1 \in T$ and $e_2 \in T&amp;rsquo;$, whose $cost(e_1) &amp;lt; cost(e_2)$ and $cost^2(e_1) &amp;gt; cost^2(e_2)$ However, the above mathematical expression doesn&amp;rsquo;t hold  Problem 2 (KT 4.2b) No. The P is no longer the shortest path for new instance.</description>
    </item>
    
    <item>
      <title>K Clustering</title>
      <link>https://keithzeng.github.io/posts/k-clustering/</link>
      <pubDate>Fri, 25 Jan 2019 21:51:25 -0800</pubDate>
      
      <guid>https://keithzeng.github.io/posts/k-clustering/</guid>
      <description>Problem We have set of objects $U = \{o_1, o_2, &amp;hellip;\}$, and we want to split them into k clusters.
We also have following definition for distance function.
 $\forall_{i,j} dist(p_i, p_j) = dist(p_j, p_j)$ $\forall_{i,j} dist(p_i, p_i) = 0$ $\forall_{i,j} dist(p_i, p_j) &amp;gt; 0$.  At the end, we should have $C = \{C_1, C_2, &amp;hellip; C_K\}$.
Let&amp;rsquo;s define spacing to be the minimum dist between clusters. Our goal is to find the k-clustering with maximum spacing.</description>
    </item>
    
  </channel>
</rss>